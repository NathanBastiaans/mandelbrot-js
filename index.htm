<!DOCTYPE html>
<html>
    <head>
        <title>Mandelbrot set</title>
    </head>
    <body>
    
        <style>
            body {
                background: #ddd
            }
        </style>

        <div>
            <button id="mandelbrotZoomIn">Zoom in</button>
            <button id="mandelbrotZoomOut">Zoom out</button>
            <button id="mandelbrotReset">Reset</button>
            |
            <button id="mandelbrotMoveUp">Up</button>
            <button id="mandelbrotMoveDown">Down</button>
            <button id="mandelbrotMoveLeft">Left</button>
            <button id="mandelbrotMoveRight">Right</button>
        </div>

        <canvas id="mandelbrotCanvas"></canvas>

        <script>
            (function() {
                // Canvas
                var mandelbrotCanvas = document.getElementById("mandelbrotCanvas");
                mandelbrotCanvas.width  = 600;
                mandelbrotCanvas.height = 600;

                // Buttons
                var mandelbrotZoomInButton  = document.getElementById("mandelbrotZoomIn");
                var mandelbrotZoomOutButton = document.getElementById("mandelbrotZoomOut");
                var mandelbrotResetButton   = document.getElementById("mandelbrotReset");

                var mandelbrotMoveUp    = document.getElementById("mandelbrotMoveUp");
                var mandelbrotMoveDown  = document.getElementById("mandelbrotMoveDown");
                var mandelbrotMoveLeft  = document.getElementById("mandelbrotMoveLeft");
                var mandelbrotMoveRight = document.getElementById("mandelbrotMoveRight");

                // Context
                var context = mandelbrotCanvas.getContext("2d");

                // Drag and drop properties
                var dragging = false;
                var firstDragRegistered = false;
                var dragX, initialDragX = 0;
                var dragY, initialDragY = 0;

                // Drag and drop events
                mandelbrotCanvas.addEventListener('mouseup',   mouseUpMandelbrot);
                mandelbrotCanvas.addEventListener('mousedown', mouseDownMandelbrot);
                mandelbrotCanvas.addEventListener('mousemove', moveMandelbrot);

                // Other events
                mandelbrotZoomInButton.addEventListener('click',  zoomIn);
                mandelbrotZoomOutButton.addEventListener('click', zoomOut);
                mandelbrotResetButton.addEventListener('click',   reset);

                mandelbrotMoveUp.addEventListener('click',    moveMandelbrotUp);
                mandelbrotMoveDown.addEventListener('click',  moveMandelbrotDown);
                mandelbrotMoveLeft.addEventListener('click',  moveMandelbrotLeft);
                mandelbrotMoveRight.addEventListener('click', moveMandelbrotRight);

                // Defaults
                var magnificationFactor = 200;
                var panX                = 2;
                var panY                = 1.5;
                var maxIterations       = 250;

                function drawMandelbrot()
                {
                    // Get variables from inputs
                    // todo

                    // Start drawing
                    for (var x=0; x < mandelbrotCanvas.width; x++) {

                        for (var y = 0; y < mandelbrotCanvas.height; y++) {

                            var belongs = doesBelongToMandelbrotSet(
                                x / magnificationFactor - panX,
                                y / magnificationFactor - panY
                            );

                            if (belongs === false) {
                                context.fillStyle = '#000';
                                context.fillRect(x, y, 1, 1); // Draw a black pixel
                            } else {
                                context.fillStyle = 'hsl(0, 100%, ' + belongs + '%)';
                                context.fillRect(x, y, 1, 1); // Draw a colorful pixel
                            }
                        }
                    }
                }

                // Capture original coordinates of target and touch
                function moveMandelbrot(e)
                {
                    if (dragging) {
                        if (firstDragRegistered) {
                            dragX = e.clientX;
                            dragY = e.clientY;
                        } else {
                            initialDragX = e.clientX;
                            initialDragY = e.clientY;

                            firstDragRegistered = true;
                        }
                    }
                }

                function moveMandelbrotUp() {
                    panY += calculateButtonMovementFactor();
                    drawMandelbrot();
                }

                function moveMandelbrotDown() {
                    panY -= calculateButtonMovementFactor();
                    drawMandelbrot();
                }

                function moveMandelbrotLeft() {
                    panX += calculateButtonMovementFactor();
                    drawMandelbrot();
                }

                function moveMandelbrotRight() {
                    panX -= calculateButtonMovementFactor();
                    drawMandelbrot();
                }

                function calculateButtonMovementFactor() {
                    return 200 / magnificationFactor;
                }

                function mouseUpMandelbrot()
                {
                    dragging = firstDragRegistered = false;

                    // Do some cool calculations for new position
					// todo

                    console.log(
                        dragX,
                        dragY,
                        initialDragX,
                        initialDragY
                    );
                    
                    drawMandelbrot();
                }
                
                function mouseDownMandelbrot()
                {
                    dragging = true;
                }
                
                function zoomIn()
                {
                    magnificationFactor += 150;

                    drawMandelbrot();
                }

                function zoomOut()
                {
                    magnificationFactor -= 150;

                    drawMandelbrot();
                }

                function reset()
                {
                    // Reset to default values
                    magnificationFactor = 200;
                    panX                = 2;
                    panY                = 1.5;
                    maxIterations       = 100;

                    drawMandelbrot();
                }

                function doesBelongToMandelbrotSet(x, y)
                {
                    var realComponentOfResult      = x;
                    var imaginaryComponentOfResult = y;
                    
                    for(var i = 0; i < maxIterations; i++) {
                        var tempRealComponent = realComponentOfResult * realComponentOfResult - imaginaryComponentOfResult * imaginaryComponentOfResult + x;
                        var tempImaginaryComponent = 2 * realComponentOfResult * imaginaryComponentOfResult + y;
                        
                        realComponentOfResult      = tempRealComponent;
                        imaginaryComponentOfResult = tempImaginaryComponent;

                        if(realComponentOfResult * imaginaryComponentOfResult > 5) {
                            return (i/maxIterations * 100);
                        }
                    }
                    
                    return false;
                }
                
                drawMandelbrot();
            })();
        </script>
    </body>
</html>